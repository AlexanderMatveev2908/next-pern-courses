
/* => start 0-connect.prisma */
datasource db {
    provider = "postgresql"
    url = env("DB_URI")
}


generator client {
  provider = "prisma-client-js"
}
/* => end 0-connect.prisma */

/* => start 1-cloud-asset.prisma */
enum TypeAsset {
  VIDEO 
  IMAGE 
}

enum EntityType {
    COURSE
    CONCEPT
}

model CloudAsset {
    id String @id @default(uuid())
    url String
    publicID String
    type TypeAsset

    entityID String
    entityType EntityType
    
    createdAt DateTime @default(now())

    @@index([entityID, entityType])
}
/* => end 1-cloud-asset.prisma */

/* => start 2-course.prisma */
enum Grade {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Stack {
  FRONTEND
  BACKEND
  FULLSTACK
  DEVOPS
  TOOLS
}

enum Tech {
  HTML
  CSS
  JAVASCRIPT
  REACT
  NEXT
  ANGULAR
  SVELTE
  VUE
  NODE
  VANILLA
  EXPRESS
  FASTIFY
  NESTJS
  BASH
  PYTHON
  JAVA
  MONGODB
  POSTGRESQL
  JEST
  VITEST
  PLAYWRIGHT
  AWS
  DOCKER
  NGINX
  VERCEL
  NETLIFY
  RAILWAY
  FLYIO
  RENDER
  NGROK
  SUPABASE
  ATLAS
  MONGOOSE
  PGADMIN
  SEQUELIZE
  TYPEORM
  PRISMA
  SASS
  LESS
  BOOTSTRAP
  TAILWIND
  POSTCSS
  FIGMA
  POSTMAN
  GIT
  YARN
}


model Course {
    id String @id @default(uuid())
    title String 
    description String?
    markdown String?
    grade Grade
    stack Stack
    tech Tech

    rootLanguage Boolean @default(false)
    estimatedTime Int @default(0)
    pointsGained Int @default(0)

    isCompleted Boolean @default(false)
    
    createdAt DateTime @default(now())
    deletedAt DateTime?   

    @@index([title, tech])

    concepts Concept[] @relation("CourseConcept")
}
/* => end 2-course.prisma */

/* => start 3-concept-course.prisma */
model Concept {
    id String @id @default(uuid())

    title String
    description String? 
    markdown String

    estimatedTime Int
    pointsGained Int
    order Int

    isCompleted Boolean @default(false)

    courseID String
    course Course @relation(fields:[courseID], references: [id],name: "CourseConcept")

    questions Question[] @relation("QuestionConcept")

    userConcept UserConcept[] @relation("UserToConcept")

    @@index([courseID, title])

    createdAt DateTime @default(now())
    deletedAt DateTime?   
}
/* => end 3-concept-course.prisma */

/* => start 4-question-concept.prisma */
model Question {
    id String @id @default(uuid())

    title String
    question String 

    conceptID String
    concept Concept @relation(fields: [conceptID],references: [id],name:"QuestionConcept" )

    variants Variant[] @relation("QuizVariant")

    @@index([conceptID, title])

    createdAt DateTime @default(now())
    deletedAt DateTime? 
}
/* => end 4-question-concept.prisma */

/* => start 5-variants-quiz.prisma */
model Variant {
    id String @id @default(uuid())

    isCorrect Boolean @default(false)
    answer String

    questionID String
    question Question @relation(fields: [questionID],references: [id],name:"QuizVariant")

    userAnswers UserAnswer[]  @relation("UserAnswer")

    @@index([questionID])

    createdAt DateTime @default(now())
    deletedAt DateTime? 
}
/* => end 5-variants-quiz.prisma */

/* => start 6-user-concept.prisma */
model UserConcept {
    id String @id @default(uuid())

    conceptID String
    concept Concept @relation(fields: [conceptID],references: [id],name:"UserToConcept")

    score Int @default(0)

    createdAt DateTime @default(now())
    deletedAt DateTime? 
}
/* => end 6-user-concept.prisma */

/* => start 7-user-answer.prisma */
model UserAnswer {
    id String @id @default(uuid())

    variantID String
    answer Variant @relation(fields: [variantID],references: [id],name:"UserAnswer")

    @@index([variantID])

    createdAt DateTime @default(now())
    deletedAt DateTime? 
}
/* => end 7-user-answer.prisma */
